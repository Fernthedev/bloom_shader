
constexpr const char* bloom_vs_glsl = "#version 310 es\n"
"\n"
"// Thanks Xyonico for these shaders!\n"
"// Apparently from https://stackoverflow.com/questions/31482816/opengl-is-there-an-easier-way-to-fill-window-with-a-texture-instead-using-vbo/31501833#31501833\n"
"\n"
"layout (location = 0) out vec2 texCoords;\n"
"\n"
"const vec2 pos[4]=\n"
"vec2[4](vec2(-1.0, 1.0),\n"
"vec2(-1.0,-1.0),\n"
"vec2( 1.0, 1.0),\n"
"vec2( 1.0,-1.0));\n"
"\n"
"void main()\n"
"{\n"
"    texCoords = 0.5 * pos[gl_VertexID] + vec2(0.5);\n"
"    // Flip image upside down. glReadPixels will flip it again, so we get the normal image.\n"
"//    texCoords.y = 1.0 - texCoords.y;\n"
"\n"
"    gl_Position = vec4(pos[gl_VertexID], 0.0, 1.0);\n"
"}\n"
"//\n"
"//#version 330 core\n"
"//layout (location = 0) in vec3 aPos;\n"
"//layout (location = 1) in vec3 aNormal;\n"
"//layout (location = 2) in vec2 aTexCoords;\n"
"//\n"
"//out VS_OUT {\n"
"//    vec3 FragPos;\n"
"//    vec3 Normal;\n"
"//    vec2 TexCoords;\n"
"//} vs_out;\n"
"//\n"
"//uniform mat4 projection;\n"
"//uniform mat4 view;\n"
"//uniform mat4 model;\n"
"//\n"
"//void main()\n"
"//{\n"
"//    vs_out.FragPos = vec3(model * vec4(aPos, 1.0));\n"
"//    vs_out.TexCoords = aTexCoords;\n"
"//\n"
"//    mat3 normalMatrix = transpose(inverse(mat3(model)));\n"
"//    vs_out.Normal = normalize(normalMatrix * aNormal);\n"
"//\n"
"//    gl_Position = projection * view * model * vec4(aPos, 1.0);\n"
"//}\n"
;
